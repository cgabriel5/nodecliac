"use strict";

// Parser:
// ✓ comments
// 	✓ single line
// 	✖ trailing-ending comments
// ✓ @settings
// ✓ command chains
// 	✓ shortcuts
// ✓ long-form flags
// 	✓ command-flags
// 	✓ flags options list

// ✖ balanced braces - necessary?
// ✖ validate characters for command chains
// ✖ account for line numbers/errors

// Needed modules.
// const path = require("path");
const chalk = require("chalk");
const { exit } = require("../utils.js");

// Require parser functions.
const config = require("./config.js");
const shortcuts = require("./shortcuts.js");
const dedupe = require("./dedupe.js");
const argparser = require("./argparser.js");
const formatflags = require("./formatflags.js");
const merge = require("./merge.js");

module.exports = (contents, commandname, source) => {
	// Vars - General.
	let line = "";
	let line_count = 0;
	let indentation = "";
	let lookup = {};
	let settings = {};
	let newlines = [];

	let open_bracket = false;
	let open_parenth = false;

	// let cc_name = "";
	// let cc_flags = [];
	let commandchain;
	let mflag;
	let mcommand;

	let line_type;

	// acmap file header.
	let header = [
		`# THIS FILE IS AUTOGENERATED —— DO NOT EDIT FILE DIRECTLY.`,
		`# ${new Date()};${Date.now()}`,
		`# nodecliac definition mapfiles: ~/.nodecliac/defs/\n`
	];

	// Check if provided char is a space.
	let isspace = char => {
		return /[ \t]/.test(char);
	};

	// The index, source input, regexp, return character count.
	let lookahead = (index, input, r, rcount) => {
		let passed = false;
		let chars = [];
		let xchars = [];
		let indices = [];
		let sindex;
		let eindex;

		if (rcount === Infinity) {
			for (let i = index, l = input.length; i < l; i++) {
				// Cache current loop item.
				let char = input[i];

				if (r.test(char)) {
					if (sindex === undefined) {
						sindex = i;
					}

					chars.push(char);
				} else {
					eindex = i - 1;
					// Stop loop as all needed chars have been retrieved.
					break;
				}
			}
		} else {
			for (let i = index, l = input.length; i < l; i++) {
				// Cache current loop item.
				let char = input[i];

				if ((r.test(char) || passed) && rcount) {
					if (sindex === undefined) {
						sindex = i;
					}

					passed = true;
					chars.push(char);
					rcount--;
				} else if (!rcount) {
					eindex = i - 1;
					// Stop loop as all needed chars have been retrieved.
					break;
				} else {
					xchars.push(char);
				}
			}
		}

		if (sindex) {
			indices.push(sindex, eindex);
		}

		return { chars, xchars, indices };
	};

	// The index, source input, regexp, return character count.
	let error = (message, index) => {
		exit([
			"",
			`${chalk.bold.red("Error")} → ${chalk.bold(
				"Syntax"
			)}: ${message} on line ${line_count + 1}:${index}.`,
			""
		]);
	};

	let p = console.log;

	// Main loop. Loops over each character in acmap.
	for (let i = 0, l = contents.length; i < l; i++) {
		// Cache current/previous/next chars.
		let char = contents.charAt(i);
		let pchar = contents.charAt(i - 1);
		let nchar = contents.charAt(i + 1);

		// Check if \r?\n newline sequence.
		if ((char === "\r" && nchar === "\n") || char === "\n") {
			// Increment line counter.
			line_count++;

			// Reset vars.
			line = "";
			line_type = null;
			indentation = "";
		}
		// All other characters.
		else {
			// If line is empty look for allowed character.
			if (!line) {
				// If the current character is a space then continue.
				if (isspace(char)) {
					indentation += char;
					continue;
				}

				// If not a space character, look for an allowed character.
				// Lines can start with following chars/char sets.
				// @      → setting
				// #      → comment
				// a-zA-Z → command chain
				//     -      → flag
				//     '- '   → flag option (ignore quotes)
				//     )      → closing flag set
				//     ]      → closing long-flag form
				// -------------------------------------------------------------
				// Special flag characters to look out for:
				// $(, "", ''

				// // Look ahead for the first non space char.
				// let { chars: fchars, indices } = lookahead(
				// 	i,
				// 	contents,
				// 	new RegExp(`([^ \t]|\\r?\\n)`),
				// 	1
				// );

				// Char must be an allowed starting char.
				if (!/[-@a-z\)\]#]/i.test(char)) {
					error(`Invalid starting line character '${char}'`, i);
				}

				// Set line start type.
				if (char === "@") {
					line_type = "setting";
				} else if (char === "#") {
					line_type = "comment";
				} else if (/[a-zA-Z]/.test(char)) {
					line_type = "command";
				} else if (char === "-") {
					// If mflag is set we are getting flag options.
					line_type = mflag ? "flag_option" : "flag_set";

					// Empty flag option check.
					if (mflag && (nchar === "\n" || nchar === "\r")) {
						error(`Empty flag option`, 0);
					}
				} else if (char === ")") {
					if (!mflag) {
						error(`Unmatched closing parentheses`, 0);
					}

					line_type = "close_parenthesis";
					line += char;
					i--;
					continue;
				} else if (char === "]") {
					if (!mcommand) {
						error(`Unmatched closing bracket`, 0);
					}

					line_type = "close_bracket";
					line += char;
					i--;
					continue;
				}

				line += char;
			} else {
				if (line_type === "setting") {
					// Setting syntax:
					let r = /^(@[a-zA-Z][_a-zA-Z]*)[ \t]*(=[ \t]*(.*?))?$/;

					// Look ahead to grab setting line.
					let { chars: fchars, xchars, indices } = lookahead(
						i,
						contents,
						new RegExp(`(\\r?\\n)`),
						1
					);

					// Get all setting line chars.
					let lchars = xchars.join("");

					// Check if setting syntax is valid give general error.
					if (!r.test(`@${lchars}`)) {
						// Further breakdown exact syntax error?
						// - setting name check?
						// - value check (if quoted is it properly quoted.)
						error(`Invalid setting`, indices[0]);
					}

					// Else it's a valid setting so reset vars.
					// Reset index to be at the end of the line.
					i = indices[0] - 1;

					// Store line.
					newlines.push((line += lchars));
				} else if (line_type === "command") {
					// Look ahead to grab command chain.
					let { chars: fchars, xchars, indices } = lookahead(
						i,
						contents,
						new RegExp(`[-_.a-zA-Z\\/]`),
						Infinity
					);

					// Command length checks?

					// Reset index to be at the end of the line.
					i = indices[1];

					// Next look for command setter (' = ' → ignore quotes).
					line_type = "command_setter";

					// Store chars.
					line += fchars.join("");

					// Store command chain.
					if (!lookup[line]) {
						lookup[line] = [];
					}

					commandchain = line;
				} else if (line_type === "command_setter") {
					// Look ahead to grab command chain.
					let { chars: fchars, xchars, indices } = lookahead(
						i,
						contents,
						new RegExp(`[ \t=]`),
						Infinity
					);

					// Reset index to be at the end of the line.
					i = indices[1];

					// Next look for command open bracket. ('[' → ignore quotes).
					line_type = "command_open_bracket";

					// Store chars.
					// line += " = ";
				} else if (line_type === "command_open_bracket") {
					let chars, fchars, xchars, indices, la;

					// Look ahead to grab command chain.
					la = lookahead(i, contents, new RegExp(`\\[`), 1);
					fchars = la.chars;
					xchars = la.xchars;
					indices = la.indices;

					let open_index = indices[1];

					// Reset index to be at the end of the line.
					i = open_index;

					// // Next look for command open bracket. ('[' → ignore quotes).
					// line_type = "command_open_bracket";

					// Store chars.
					// line += "[";

					// Look ahead once more. We can only have 3 situations:
					// 1 - There are no more characters (excluding spaces).
					// 2 - There is a closing bracket ']'.
					// 3 - There are other chars unallowed chars.

					// Look ahead to grab...
					la = lookahead(i + 1, contents, new RegExp(`(\\r?\\n)`), 1);
					fchars = la.chars;
					xchars = la.xchars;
					indices = la.indices;

					let close_index = indices[1];

					// Remaining chars after open bracket '['.
					let rchars = xchars.join("").trim();
					if (/[^\]]/.test(rchars)) {
						error(
							`Invalid characters after open bracket '['`,
							indices[0]
						);
					}

					if (rchars === "]") {
						line += " --";
						// Reset index to be at the end of the line.
						i = indices[0] - 1;
					} else {
						// Set type to flags.
						// line_type = "";
						mcommand = true;
					}

					// Store line.
					// newlines.push((line += lchars));
					newlines.push(line);
				} else if (line_type === "flag_set") {
					// Setting syntax:
					let r = /^-{1,2}([a-zA-Z][-_:a-zA-Z0-9]*)[ \t]*(=\*?[ \t]*(\(|\(\))?)?$/;

					// Look ahead to grab setting.
					let { chars: fchars, xchars, indices } = lookahead(
						i,
						contents,
						new RegExp(`(\\r?\\n)`),
						1
					);

					// Get all setting line chars.
					let lchars = xchars.join("");

					// Check if setting syntax is valid give general error.
					if (!r.test(`-${lchars}`)) {
						// Further breakdown exact syntax error?
						// - setting name check?
						// - value check (if quoted is it properly quoted.)
						error(`Invalid flag`, indices[0]);
					}

					// Add flag to commandchain.
					// if (lchars.includes("*")) {
					// }

					let chain = lookup[commandchain];
					if (chain) {
						// chain.push(`-${lchars}`);
						chain.push(`-${lchars.replace(/[\(\)]/g, "")}`);
					}

					if (lchars.includes("(") && !lchars.includes(")")) {
						// open_parenth = true;
						mflag = `-${lchars.replace(/[\=\*\(]/g, "")}`;
					}

					// Else it's a valid setting so reset vars.
					// Reset index to be at the end of the line.
					i = indices[0] - 1;

					// Store line.
					newlines.push((line += lchars));
				} else if (line_type === "flag_option") {
					// Flag option syntax:
					let r = /^[ \t]*-[ \t]*(.{2,})$/;

					// Look ahead to grab setting.
					let { chars: fchars, xchars, indices } = lookahead(
						i,
						contents,
						new RegExp(`(\\r?\\n)`),
						1
					);

					// Get all setting line chars.
					let lchars = xchars.join("");

					// Check if setting syntax is valid give general error.
					if (!r.test(`-${lchars}`)) {
						// Further breakdown exact syntax error?
						// - setting name check?
						// - value check (if quoted is it properly quoted.)
						error(`Invalid flag option`, indices[0]);
					}

					let chain = lookup[commandchain];
					if (chain) {
						chain.push(`${mflag}=${lchars.trim()}`);
					}

					// if (lchars.includes("(") && !lchars.includes(")")) {
					// 	// open_parenth = true;
					// 	mflag = `-${lchars.replace(/[\=\*\(]/g, "")}`;
					// }

					// Else it's a valid setting so reset vars.
					// Reset index to be at the end of the line.
					i = indices[0] - 1;

					// Store line.
					newlines.push((line += lchars));
				} else if (line_type === "close_parenthesis") {
					// Flag option syntax:
					let r = /^[ \t]*\)[ \t]*$/;

					// if (mflag) {
					// 	error(`Unmatched closing parentheses`, 0);
					// }

					// Look ahead to grab setting.
					let { chars: fchars, xchars, indices } = lookahead(
						i,
						contents,
						new RegExp(`(\\r?\\n)`),
						1
					);

					// Get all setting line chars.
					let lchars = xchars.join("");

					// Check if setting syntax is valid give general error.
					if (!r.test(`${lchars}`)) {
						// Further breakdown exact syntax error?
						// - setting name check?
						// - value check (if quoted is it properly quoted.)
						error(`Invalid closing parentheses.`, indices[0]);
					}

					// Reset flags.
					mflag = null;

					// Else it's a valid setting so reset vars.
					// Reset index to be at the end of the line.
					i = indices[0] - 1;

					// Store line.
					newlines.push(line);
				} else if (line_type === "close_bracket") {
					// Flag option syntax:
					let r = /^[ \t]*\][ \t]*$/;

					// Look ahead to grab setting.
					let { chars: fchars, xchars, indices } = lookahead(
						i,
						contents,
						new RegExp(`(\\r?\\n)`),
						1
					);

					// Get all setting line chars.
					let lchars = xchars.join("");

					// Check if setting syntax is valid give general error.
					if (!r.test(`${lchars}`)) {
						// Further breakdown exact syntax error?
						// - setting name check?
						// - value check (if quoted is it properly quoted.)
						error(`Invalid closing bracket.`, indices[0]);
					}

					// Reset flags.
					mcommand = null;

					// Else it's a valid setting so reset vars.
					// Reset index to be at the end of the line.
					i = indices[0] - 1;

					// Store line.
					newlines.push(line);
				} else if (line_type === "comment") {
					// Get all line characters and rest index.

					// Comment syntax:
					let r = /^#.*?$/;

					// Look ahead to grab comment ending.
					let { xchars, indices } = lookahead(
						i,
						contents,
						new RegExp(`(\\r?\\n)`),
						1
					);

					// Get all comment line chars.
					let lchars = xchars.join("");

					// Reset index to be at the end of the line.
					i = indices[0] - 1;

					// Don't store line.
				}
			}
		}
	}

	console.log(lookup);

	// for (let i = 0, l = newlines.length; i < l; i++) {
	// 	// Cache current loop item.
	// 	let line = newlines[i];

	// 	p(line);
	// }

	exit([]);

	// // Return generated acdef/config file contents.
	// return {
	// 	acdef: header
	// 		.concat(
	// 			merge(commandname, lookup, newlines).sort(function(a, b) {
	// 				return a.localeCompare(b);
	// 			})
	// 		)
	// 		.join("\n")
	// 		.replace(/\s*$/, ""),
	// 	config: config(settings, header)
	// };
};
