# ACMAP for yarn@1.15.2.
# Resources:
# [https://github.com/dsifford/yarn-completion/blob/master/yarn-completion.bash]
# [https://yarnpkg.com/en/docs/cli/]

# Variables - paths.
$configscript = "~/.nodecliac/registry/yarn/scripts/config.sh"
$mainscript = "~/.nodecliac/registry/yarn/scripts/main.sh"
# Variables - shell commands.
$cmd_add = 'bash -c "ls -lF ~/.cache/yarn/v4 \| grep -Po \"npm-([-a-z]+)-\\d\" \| sed -e \"s/^npm-//\" -e \"s/-[0-9]$//\""'

# Main command/flags.
yarn = [
	--cache-folder
	--check-files
	--cwd
	--disable-pnp
	--emoji?
	--enable-pnp
	--flat
	--focus
	--force
	--frozen-lockfile
	--global-folder
	--har
	--https-proxy
	--ignore-engines
	--ignore-optional
	--ignore-platform
	--ignore-scripts
	--json
	--link-duplicates
	--link-folder
	--modules-folder
	--mutex
	--network-concurrency
	--network-timeout
	--no-bin-links
	--no-default-rc
	--no-lockfile
	--non-interactive
	--no-node-version-check
	--no-progress
	--offline
	--otp
	--prefer-offline
	--preferred-cache-folder
	--production
	--proxy
	--pure-lockfile
	--registry
	--silent
	--scripts-prepend-node-path?
	--skip-integrity-check
	--strict-semver
	--update-checksums
	--use-yarnrc
	--version
	--verbose
	--help
	# Dynamically add scripts as commands. [https://yarnpkg.com/en/docs/cli/run]
	# always $("${mainscript} run")
	# ^Note: Use pre-hook to add the script name as commands on the fly.
]

yarn.access

yarn.add = [
	# [https://yarnpkg.com/en/docs/cli/add]
	--dev
	--peer
	--optional
	--exact
	--tilde
	--ignore-workspace-root-check
	--audit

	# [https://stackoverflow.com/a/43747805]
	# [https://github.com/yarnpkg/yarn/issues/2049]
	# [https://stackoverflow.com/questions/47952851/where-is-yarn-storing-offline-packages]
	# [https://stackoverflow.com/questions/428109/extract-substring-in-bash]
	# [https://stackoverflow.com/questions/16623835/remove-a-fixed-prefix-suffix-from-a-string-in-bash]
	default $('${cmd_add}')
]

yarn.audit = [
	--verbose
	--json
	# Grabbed from [https://github.com/dsifford/yarn-completion/blob/master/yarn-completion.bash]
	--groups
	--level
	--summary
]

yarn.autoclean = --init|--force

yarn.bin

yarn.cache.list = --pattern
yarn.cache.dir
yarn.cache.clean

yarn.check = --integrity|--verify-tree

yarn.config.set = --global
yarn.config.set,
yarn.config.get,
yarn.config.delete = default $("${configscript}")
# [https://github.com/yarnpkg/yarn/issues/2049#issuecomment-397629921]
yarn.config.current
yarn.config.list

yarn.create
yarn.exec
yarn.generate-lock-entry = --resolved|--use-manifest

yarn.global,
yarn.global.add,
yarn.global.bin,
yarn.global.list,
yarn.global.remove,
yarn.global.upgrade,
yarn.global.upgrade-interactive = --prefix|--latest
# [https://github.com/yarnpkg/yarn/issues/2049#issuecomment-337870443]
yarn.global.dir
yarn.global.add = default $('${cmd_add}')
yarn.global.remove = default $("${mainscript} remove")
yarn.global.upgrade = default $("${mainscript} upgrade")

yarn.help
yarn.import

# [https://yarnpkg.com/en/docs/cli/info]
yarn.info = --json|default $('${cmd_add}')
# For the time being add standard fields as command chains. However a better
# solution should be used for this.
yarn.info.author,
yarn.info.bin,
yarn.info.bugs,
yarn.info.contributors,
yarn.info.dependencies,
yarn.info.description,
yarn.info.devDependencies,
yarn.info.dist-tags,
yarn.info.engines,
yarn.info.files,
yarn.info.homepage,
yarn.info.keywords,
yarn.info.license,
yarn.info.main,
yarn.info.maintainers,
yarn.info.name,
yarn.info.optionalDependencies,
yarn.info.peerDependencies,
yarn.info.readme,
yarn.info.repository,
# yarn.info.time
yarn.info.version,
yarn.info.versions = --json

yarn.init = --private|--yes

yarn.install = [
	--check-files
	--flat
	--force
	--har
	--ignore-scripts
	--modules-folder
	--no-lockfile
	--production=(true false)
	--pure-lockfile
	--focus
	--frozen-lockfile
	--silent
	--ignore-engines
	--ignore-optional
	--offline
	--non-interactive
	--update-checksums
	--audit
	--no-bin-links
	--link-duplicates
]

yarn.licenses.list
yarn.licenses.generate-disclaimer

yarn.link

yarn.list = --depth|--pattern
yarn.login
yarn.logout
yarn.node = --info

# [https://yarnpkg.com/en/docs/cli/outdated]
yarn.outdated = default $("${mainscript} outdated")

# [https://yarnpkg.com/en/docs/cli/owner]
yarn.owner
yarn.owner.list
yarn.owner.add
yarn.owner.remove

yarn.pack = --filename

# [https://yarnpkg.com/en/docs/cli/policies]
yarn.policies
yarn.policies.latest
yarn.policies.nightly
yarn.policies.rc
yarn.policies.set-version = --rc

# [https://yarnpkg.com/en/docs/cli/publish]
yarn.publish = [
	--access
	--major
	--message
	--minor
	--new-version
	--no-commit-hooks
	--no-git-tag-version
	--patch
	--tag
]

# [https://yarnpkg.com/en/docs/cli/remove]
yarn.remove = default $("${mainscript} remove")

# [https://yarnpkg.com/en/docs/cli/run]
yarn.run = default $("${mainscript} run")
# yarn.run.test

# [https://yarnpkg.com/en/docs/cli/tag]
yarn.tag
yarn.tag.add
yarn.tag.remove
yarn.tag.list

# [https://yarnpkg.com/en/docs/cli/team]
yarn.team
yarn.team.add
yarn.team.create
yarn.team.destroy
yarn.team.list
yarn.team.remove

# Shortcut for yarn.run.test
# [https://yarnpkg.com/en/docs/cli/test]
yarn.test

yarn.unlink

yarn.unplug = [
	--clear
	--clear-all
	default $("${mainscript} unplug")
]

yarn.upgrade = [
	--caret
	--exact
	--latest
	--pattern
	--scope
	--tilde
	default $("${mainscript} upgrade")
]
yarn.upgrade-interactive = [
	--caret
	--exact
	--latest
	--scope
	--tilde
]

# [https://yarnpkg.com/en/docs/cli/version]
yarn.version = [
	--major
	--message
	--minor
	--new-version
	--no-commit-hooks
	--no-git-tag-version
	--patch
]
yarn.versions

# [https://yarnpkg.com/en/docs/cli/why]
yarn.why = [
	# Portable version:
	# [https://stackoverflow.com/questions/24832458/pcre-regex-to-sed/42381797#42381797]
	# [https://unix.stackexchange.com/questions/84477/forcing-bash-to-use-perl-regex-engine/84492#84492]
	# [https://stackoverflow.com/questions/4794145/perl-one-liner-like-grep]
	# [https://superuser.com/questions/416419/perl-for-matching-with-regular-expressions-in-terminal/416450#416450]
	# [https://stackoverflow.com/questions/26875838/can-these-two-regex-expressions-ever-give-a-different-result]
	# [https://en.wikipedia.org/wiki/One-liner_program#Perl]
	# [https://dzone.com/articles/perl-as-a-better-grep]
	# [https://serverfault.com/questions/208265/what-is-bash-event-not-found/631101#631101]
	# [https://stackoverflow.com/questions/53886144/how-to-fix-possible-unintended-interpolation-of-in-regex/53886274#53886274]
	default $('bash -c "yarn list --depth=0 \| perl -wln -e \"/(?! ─ )([-\/_.@(?)a-zA-Z0-9]*)(?=\@)/ and print $&;\""')
	# Above command is slow due to running yarn (node.js CLI tool) - not a native shell CLI tool (i.e. bash based).

	# Non-portable GNU grep only solution.
	# default $("yarn list --depth=0 \| grep -Po '(?! ─ )[-\/_.@a-zA-Z0-9]+(?=\@)'")
]

# [https://yarnpkg.com/en/docs/cli/workspace]
# [https://yarnpkg.com/en/docs/cli/workspaces]
# [https://yarnpkg.com/en/docs/workspaces]
# [https://github.com/dsifford/yarn-completion/blob/master/yarn-completion.bash#L900]
yarn.workspace = default $("${mainscript} workspace")

# [https://yarnpkg.com/en/docs/cli/workspaces]
yarn.workspaces

yarn.workspaces.info
# [https://yarnpkg.com/en/docs/cli/run]
yarn.workspaces.run = default $("${mainscript} run")
