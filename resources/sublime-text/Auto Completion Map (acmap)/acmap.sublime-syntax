%YAML 1.2
---
name: Auto Completion Map (acmap/def)
file_extensions:
  - acmap
  - acdef
scope: source.acmap

# Resources:
# [https://medium.com/@model_train/creating-universal-syntax-highlighters-with-iro-549501698fd2]
# [https://eeyo.io/iro/], [https://eeyo.io/iro/documentation/]
# [https://www.sublimetext.com/docs/3/scope_naming.html]
# [https://www.sublimetext.com/docs/3/syntax.html]
# [https://github.com/sublimehq/Packages]

# -------------------------------------------------------------------- VARIABLES

variables:
  settings: 'compopt|filedir|disable|placehold' # Allowed settings.
  flag: '(--?)([a-zA-Z][-_.:a-zA-Z0-9]*)?'

# --------------------------------------------------------------------- CONTEXTS

contexts:
  prototype:
    - include: comments
  main:
    - include: primitives
    - include: constructs
    - include: remainders
  primitives:
    - include: constants
    - include: numbers
    - include: strings
  constructs:
    - include: settings
    - include: variables
    - include: commands
  remainders:
    - include: assignment
    - include: unaccounted

# ------------------------------------------------------------------- PRIMITIVES

  comments:
    - match: "^\\s*((\\#).*)" # Single line comment.
      captures:
        1: comment.line.number-sign.acmap
        2: punctuation.definition.comment.begin.acmap

  constants:
    - match: \b(?:(true)|(false))\b
      captures:
        1: constant.language.boolean.true.acmap
        2: constant.language.boolean.false.acmap

  numbers: # [https://stackoverflow.com/a/30987109]
    - match: '\b(?:NaN|-?(?:(?:\d+|\d*\.\d+)(?:[E|e][+|-]?\d+)?|Infinity))\b'
      scope: constant.numeric.acmap

  strings:
    - match: '"' # Double quoted strings.
      scope: punctuation.definition.string.begin.acmap
      push:
        - meta_scope: string.quoted.double.acmap
        - meta_include_prototype: false
        - include: escape
        - match: '"'
          scope: punctuation.definition.string.end.acmap
          pop: true
        - include: template-strings
    - match: "'" # Single quoted strings.
      scope: punctuation.definition.string.begin.acmap
      push:
        - meta_scope: string.quoted.single.acmap
        - meta_include_prototype: false
        - include: escape
        - match: "'"
          scope: punctuation.definition.string.end.acmap
          pop: true
        - include: template-strings
  template-strings:
    - match: '\$\{'
      scope: punctuation.section.interpolation.begin.acmap
      push:
        - clear_scopes: 1
        - meta_scope: meta.interpolation.acmap
        - meta_content_scope: source.acmap.embedded
        - match: '\}'
          scope: punctuation.section.interpolation.end.acmap
          pop: true

  escape:
    - match: '\\.'
      scope: constant.character.escape.acmap

  default: # Highlight remaining characters as unquoted strings.
    - include: escape
    - match: "([^\\s])"
      scope: string.unquoted.plain.out.acmap

  unaccounted: # Highlight unaccounted characters in main context as invalid.
    - match: "([^\\s])"
      scope: invalid.illegal.acmap

# ------------------------------------------------------------------- CONSTRUCTS

  settings:
    - match: "((@)[a-zA-Z][_a-zA-Z0-9]*)"
      captures:
        2: punctuation.definition.variable.acmap
        1: variable.other.readwrite.global.acmap # **purple

  variables:
    - match: "((\\$)[_a-zA-Z][_a-zA-Z0-9]*)"
      captures:
        2: punctuation.definition.variable.acmap
        1: variable.other.readwrite.global.acmap # **purple

  commands:
    - match: "^[a-zA-Z]"
      push:
        - meta_scope: entity.other.command.acmap # **italicize
        - meta_include_prototype: false
        - match: "(?=(=|,| |\t|$))"
          pop: true
        - include: escape
    - match: "(\\[)" # Route[1]: flag-list
      captures:
        1: punctuation.section.flag-list.begin.acmap # **purple-brace
      push:
        - meta_scope: meta.flag-list.acmap
        - match: "(\\])"
          captures:
            1: punctuation.section.flag-list.end.acmap # **purple-brace
          pop: true
        - include: flags
    - match: "(?={{flag}})" # Route[2]: oneliner | Handle: 'command = --flag'
      push:
        - match: '$' # Note: oneliner consumes entire line.
          pop: true
        - include: flags
    - include: keywords # Route[3]: 'default' keyword

  flags:
    # - match: "{{flag}}([ \t]*(=)(\\*)?|(\\?))?"
    - match: "{{flag}}" # Handle: '--flag'
      scope: meta.flag-name.acmap
      captures:
        1: punctuation.definition.flag.acmap
        2: support.type.flag-name.acmap # **purple
    - match: "((=)(\\*)?|(\\?))" # Handle: '=*' or '?'
      captures:
        2: keyword.operator.assignment.acmap
        3: keyword.operator.assignment.multi-flag.acmap
        4: keyword.operator.assignment.boolean.acmap
    - match: "(\\()" # Route[1]: options-list:
      scope: meta.options-list.acmap
      captures:
        1: punctuation.section.options-list.begin.acmap # **purple-brace
      push:
        - match: "(\\))"
          captures:
            1: punctuation.section.options-list.end.acmap # **purple-brace
          pop: true
        - match: "((-) )" # Handle: '- value'
          captures:
            2: punctuation.definition.block.option.item.acmap
        - include: command-string
        - include: primitives
        - include: constructs
        - include: assignment
        - include: default # Leftovers highlight as unquoted-strings.
    # Route[2]: remainders: Handle remaining un-highlighted text.
    - include: primitives
    - include: constructs
    - include: assignment
    - include: default # Leftovers highlight as unquoted-strings.

  keywords:
    - match: "(default)([ \t]{1,})"
      captures:
        1: keyword.control.default.acmap
    - include: command-string

  command-string:
    - match: "(\\$)(\\()"
      captures:
        1: storage punctuation.definition.command-string.acmap
        2: punctuation.section.parens.command-string.begin.acmap
      push:
        - match: "(\\))"
          captures:
            1: punctuation.section.parens.command-string.end.acmap
          pop: true
        - match: "(\\$)(?=[\"'])" # Handle: cmd-string dynamic '$' argument.
          captures:
            1: storage.type.string.acmap
        - include: main

  assignment:
    - match: "((=)|(,)|(\\|))"
      captures:
        2: keyword.operator.assignment.acmap
        3: keyword.operator.logical.delimiter.comma.acmap
        4: keyword.operator.logical.delimiter.pipe.acmap
