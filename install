#!/bin/bash

# Get platform name.
#
# @return {string} - User's platform.
# @resource [https://stackoverflow.com/a/18434831]
function platform() {
	case "$OSTYPE" in
		solaris*) echo "solaris" ;;
		darwin*)  echo "macosx" ;;
		linux*)   echo "linux" ;;
		bsd*)     echo "bsd" ;;
		msys*)    echo "windows" ;;
		*)        echo "unknown" ;;
	esac
}

# Checks if command exists.
#
# @param {string} 1) - Command name.
# @return {string} - Command path if exists.
# @resource [https://stackoverflow.com/a/677212]
function exists() {
	echo `command -v "$1"`
}

# Remove last line from terminal output.
#
# @return - Nothing is returned.
# @resource [https://stackoverflow.com/a/27326630]
function cline() {
	tput cuu 1 && tput el
}

# Print error message and exit.
#
# @param {string} 1) - Message to print.
# @return - Nothing is returned.
function err() {
	echo -e "\033[1;31mError\033[0m: $1" && exit
}

# Print success message.
#
# @param {string} 1) - Message to print.
# @return - Nothing is returned.
function success() {
	cline && echo -e " $CHECK_MARK $1" && sleep 0.1 && cline
}

os=`platform`
outputdir="$HOME/.nodecliac-src"
# Unix timestamp in ms: [https://stackoverflow.com/a/21640976]
timestamp=$(perl -MTime::HiRes=time -e 'print int(time() * 1000);')
binfilepath="/usr/local/bin/nodecliac" # [https://unix.stackexchange.com/a/8664]
CHECK_MARK="\033[0;32m\xE2\x9C\x94\033[0m"
branch_name="master"
installer=""
rcfilepath=""

while (( "$#" )); do
	case "$1" in
		--branch=*)
			flag="${1%%=*}"; value="${1#*=}"
			if [[ -n "$value" ]]; then branch_name="$value"; fi; shift ;;
		--branch)
			if [[ -n "$2" && "$2" != *"-" ]]; then branch_name="$2"; fi; shift ;;

		--installer=*)
			flag="${1%%=*}"; value="${1#*=}"
			if [[ -n "$value" ]]; then installer="$value"; fi; shift ;;
		--installer)
			if [[ -n "$2" && "$2" != *"-" ]]; then installer="$2"; fi; shift ;;

		--rcfilepath=*)
			flag="${1%%=*}"; value="${1#*=}"
			# Expand `~` in path: [https://stackoverflow.com/a/27485157]
			if [[ -n "$value" ]]; then rcfilepath="${value/#\~/$HOME}"; fi; shift ;;
		--rcfilepath)
			if [[ -n "$2" && "$2" != *"-" ]]; then rcfilepath="$2"; fi; shift ;;

		--) shift; break ;; # End argument parsing.
		-*|--*=) shift ;; # Unsupported flags.
		*) shift ;; # Preserve positional arguments.
	esac
done
eval set -- "$params"
shift

repourl="https://api.github.com/repos/cgabriel5/nodecliac/tarball/$branch_name"
branchurl="https://api.github.com/repos/cgabriel5/nodecliac/branches/$branch_name"
gitbranch_https="https://github.com/cgabriel5/nodecliac.git"
gitbranch_ssh="git@github.com:cgabriel5/nodecliac.git"
branch_npm="https://github.com/cgabriel5/nodecliac/tarball/$branch_name"
branch_yarn="cgabriel5/nodecliac#$branch_name"

if [[ ! -n "$installer" ]]; then
	if [[ -n "$(exists yarn)" ]]; then installer="yarn"
	elif [[ -n "$(exists npm)" ]]; then installer="npm"
	else installer="binary"; fi
fi

# Fallback to ~/.bashrc if needed.
if [[ -n "$rcfilepath" && ! -f "$rcfilepath" || -z "$rcfilepath" ]]; then
	rcfilepath=~/.bashrc
	if [[ ! -f "$rcfilepath" ]]; then touch "$rcfilepath"; fi
fi

# -------------------------------------------------------- LANGUAGE-REQUIREMENTS

if [[ -z "$(exists perl)" ]]; then err "Perl not installed."; fi
perl_majorv="$(perl --version | perl -ne 'print $1 if /\(v([^.]).*\)/')"
if [[ "$((perl_majorv + 0))" -lt 5 ]]; then err "Perl 5 is needed."; fi

vmajor=${BASH_VERSINFO[0]}
vminor=${BASH_VERSINFO[1]}
if [[ "$vmajor" -lt 4 ]] || [[ "$vmajor" -eq 4 && "$vminor" -le 2 ]]; then
	err "Bash 4.3+ is needed."
fi

# ----------------------------------------------------------------------- CHECKS

if [[ " linux macosx " != *" $os "* ]]; then
	err "Platform '$os' not supported."
fi
if [[ $# -gt 2 ]]; then
	err -e "2 arguments are allowed: [installer, branch] but $# provided."
fi

if [[ " yarn npm binary " != *" $installer "* ]]; then
	err "Invalid installer '$installer'. Provide: 'yarn|npm|binary'."
fi
if [[ "$installer" == "yarn" ]]; then
	if [[ -z "$(exists yarn)" ]]; then err "yarn not installed."; fi
elif [[ "$installer" == "npm" ]]; then
	if [[ -z "$(exists npm)" ]]; then err "npm not installed."; fi
fi

# Check branch exists: [https://stackoverflow.com/a/23916276]
echo " - Verifying branch..."
if [[ -n "$(exists wget)" ]]; then
	if [[ -z "$(wget -qO- "$branchurl" | grep -o tree)" ]]; then
		cline && err "Branch '$branch_name' doesn't exist."
	fi
elif [[ -n "$(exists curl)" ]]; then
	if [[ -z "$(curl -Ls "$branchurl" | grep -o tree)" ]]; then
		cline && err "Branch '$branch_name' doesn't exist."
	fi
fi
success "Verified branch."

# If ~/.nodecliac exists back it up.
if [[ -e ~/.nodecliac ]]; then
	echo " - Backing up old ~/.nodecliac directory..."
	cp -a ~/.nodecliac "$HOME/.nodecliac.bak.$timestamp"
	success "Backed up old ~/.nodecliac directory."
fi

if [[ -n "$(exists nodecliac)" ]]; then
	echo " - Running 'nodecliac uninstall'..."
	nodecliac uninstall > /dev/null 2>&1
	success "Ran 'nodecliac uninstall'."
fi
if [[ -n "$(exists yarn)" ]]; then
	echo " - Checking for yarn global nodecliac install..."
	if [[ -n "$(yarn global list | grep -o "nodecliac@")" ]]; then
		cline && echo " - Removing global nodecliac from yarn..."
		yarn global remove nodecliac > /dev/null 2>&1
		success "Removed global yarn nodecliac install."
	fi
	success "No global yarn nodecliac install to remove."
fi
if [[ -n "$(exists npm)" ]]; then
	echo " - Checking for npm global nodecliac install..."
	if [[ -n "$(npm list -g --depth=0 | grep -o "nodecliac@")" ]]; then
		cline && echo " - Removing global nodecliac from npm..."
		sudo npm uninstall -g nodecliac > /dev/null 2>&1
		success "Removed global npm nodecliac install."
	fi
	success "No global npm nodecliac install to remove."
fi

# -------------------------------------------------------------- INSTALLER-LOGIC

if [[ "$installer" == "binary" ]]; then
	uhdir="${HOME/#$HOME/\~}" # Un-expand tilde:

	# Clone repo (wget > curl > git).
	usewget="$(exists wget)"
	usecurl="$(exists curl)"
	if [[ -n "$usewget$usecurl" ]]; then
		echo " - Downloading repository..."
		tarname="$HOME/.nodecliac-src.tar.gz"
		if [[ -n "$usewget" ]]; then wget -q -c "$repourl" -O "$tarname"
		else curl -Ls "$repourl" -o "$tarname"; fi
		success "Downloaded repository."
		echo " - Extracting repository..."
		tar -xzf "$tarname" -C ~/
		success "Extracted repository."
		echo " - Moving repository to '$uhdir'..."
		rm -rf "$outputdir"/* && mv -f ~/cgabriel5-nodecliac-* "$outputdir"
		success "Moved repository to '$uhdir'."
	elif [[ -n "$(exists git)" ]]; then
		echo " - Downloading repository..."
		git clone -q -b "$branch_name" --single-branch "$gitbranch_https" "$outputdir"
		# git clone -q -b "$branch_name" --single-branch "$gitbranch_ssh" "$outputdir"
		success "Downloaded repository."
	fi

	# Copy relevant/platform specific files.
	echo " - Setting up ~/.nodecliac..."
	dest="$HOME/.nodecliac/src"
	acpath="$outputdir/src/scripts/ac"
	mainpath="$outputdir/src/scripts/main"
	binpath="$outputdir/src/scripts/bin"
	mkdir -p ~/.nodecliac/{registry,src}
	mkdir -p "$dest"/{bin,main}
	mkdir -p "$dest"/ac/utils
	cp -pr "$acpath"/ac.pl "$dest/ac"
	cp -pr "$acpath"/utils/LCP.pm "$dest/ac/utils"
	cp -pr "$mainpath"/{init,connector}.sh "$dest/main"
	cp -pr "$mainpath"/config.pl "$dest/main"
	cp -pr "$binpath"/binary.sh "$dest/bin"
	cp -pr "$outputdir"/resources/packages/* ~/.nodecliac/registry
	nimbin="$outputdir/src/parser/nim/nodecliac.$os"
	if [[ -e "$nimbin" ]]; then cp -pr "$nimbin" "$dest/bin"; fi

	version="$(perl -ne 'print $1 if /"version":\s*"([^"]+)/' "$outputdir/package.json")"
	echo "{ \"force\": false, \"rcfilepath\": \"$rcfilepath\", \"time\": \"$timestamp\", \"binary\": true, \"version\": \"$version\" }" > ~/.nodecliac/.setup.db.json

	# Strip comments/empty lines.
	# [http://isunix.github.io/blog/2014/07/24/perl-one-liner-to-remove-blank-lines/].
	# [https://stackoverflow.com/a/6995010], [https://unix.stackexchange.com/a/179449]
	perl -pi -e 's/^\s*#(?!!).*?$//g;s/\s{1,}#\s{1,}.+$//g;s!^\s+?$!!' ~/.nodecliac/src/**/*.{sh,pl}

	success "Setup ~/.nodecliac."

	# Add nodecliac to rcfile.
	if [[ -z "$(grep -o "ncliac=~/.nodecliac/src/main/init.sh" "$rcfilepath")" ]]; then
		echo " - Adding nodecliac to $rcfilepath..."
		echo -e '\nncliac=~/.nodecliac/src/main/init.sh;if [ -f "$ncliac" ];then source "$ncliac";fi;' >> "$rcfilepath"
		perl -i -lpe 's/\x0a$//' "$rcfilepath"
		success "Added nodecliac to $rcfilepath."
		# [https://www.unix.com/shell-programming-and-scripting/229399-how-add-newline-character-end-file.html]
		# [https://knowledge.ni.com/KnowledgeArticleDetails?id=kA00Z0000019KZDSA2]
		# [https://stackoverflow.com/a/9021745]
	fi

	# # Modify nodecliac.acdef for binary.
	# # Remove all but the following commands.
	# allowed_commands="add|remove|link|unlink|enable|disable|print|status|registry|uninstall"
	# perl -i -lne 'if (/^(#|\.('"$allowed_commands"') --| )/) { if ($1 eq " ") { print "\n --"} elsif ($1 eq ".uninstall --") { print "$1" } else { print } }' ~/.nodecliac/registry/nodecliac/nodecliac.acdef
	# # Add back '--version'.
	# perl -p -i -e 's/^ \-\-/ \-\-version?/m if /^ /' ~/.nodecliac/registry/nodecliac/nodecliac.acdef

	echo " - Creating $binfilepath..."
	sudo cp -p "$outputdir/src/scripts/bin/binary.sh" "$binfilepath"
	sudo chmod +x "$binfilepath"
	success "Created $binfilepath."

	echo " - Cleaning up..."
	rm -rf ~/.nodecliac-src*
	success "Cleanup completed."
else
	hash -r # Rebuild $PATH: [https://unix.stackexchange.com/a/5610]

	if [[ "$installer" == "npm" ]]; then
		echo " - Installing nodecliac via npm..."
		# Global installs can't install shorthand branch method:
		# [https://stackoverflow.com/a/32436218]
		# sudo npm i -g "cgabriel5/nodecliac#$branch_name" > /dev/null 2>&1
		sudo npm i -g "$branch_npm" > /dev/null 2>&1
		success "Installed nodecliac via npm."
	elif [[ "$installer" == "yarn" ]]; then
		echo " - Installing nodecliac via yarn..."
		yarn global add "$branch_yarn" > /dev/null 2>&1
		success "Installed nodecliac via yarn."
	fi

	echo " - Setting up nodecliac..."
	nodecliac setup > /dev/null 2>&1
	success "Setup nodecliac."
fi

# Use \033 rather than \e: [https://stackoverflow.com/a/37366139]
echo -e "\033[1;32mSuccess\033[0m: nodecliac installed."
echo -e "    \033[1;34mTip\033[0m: Reload rcfile before using: \033[1msource ${rcfilepath/#$HOME/\~}\033[0m"
