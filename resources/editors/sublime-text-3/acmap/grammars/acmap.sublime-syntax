%YAML 1.2
---
name: ACMAP
file_extensions:
  - acmap
  - acdef
scope: source.acmap

# Resources:
# [https://medium.com/@model_train/creating-universal-syntax-highlighters-with-iro-549501698fd2]
# [https://eeyo.io/iro/], [https://eeyo.io/iro/documentation/]
# [https://www.sublimetext.com/docs/3/scope_naming.html]
# [https://www.sublimetext.com/docs/3/syntax.html]
# [https://github.com/sublimehq/Packages]
# [https://forum.sublimetext.com/t/help-with-custom-sublime-syntax-file/27717]
# [https://forum.sublimetext.com/t/generic-question-about-syntax-workflow/48293]
# [https://forum.sublimetext.com/t/is-is-possible-to-create-syntax-definitions-that-can-refer-up-the-context-stack/32065]
# [https://forum.sublimetext.com/t/syntax-how-to-add-a-rule-to-an-included-scope/28733]
# [https://github.com/sublimehq/Packages/blob/master/CSS/CSS.sublime-syntax]
# [https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide]
# [https://html-css-js.com/html/character-codes/arrows/]

# -------------------------------------------------------------------- VARIABLES

# variables:
  # settings: 'compopt|filedir|disable|placehold' # Allowed settings.
  # flag: '(--?)(([a-zA-Z][-_.:a-zA-Z0-9]*)(\?)?)?'

# --------------------------------------------------------------------- CONTEXTS

contexts:
  prototype:
    - include: comment
  main:
    - include: setting
    - include: variable
    - include: command
    - include: flag-list
    - include: flag-oneliner
    - include: unaccounted

# ------------------------------------------------------------------- PRIMITIVES

  comment:
    - match: "^\\s*((\\#).*)" # Single line comment.
      captures:
        1: comment.line.number-sign.acmap
        2: punctuation.definition.comment.line.number-sign.acmap

  constants:
    - match: \b(?:(true)|(false)|(null))\b
      captures:
        1: constant.language.boolean.true.acmap
        2: constant.language.boolean.false.acmap
        3: constant.language.null.acmap

  numbers: # [https://stackoverflow.com/a/30987109]
    # - match: '\b(?:NaN|-?(?:(?:\d+|\d*\.\d+)(?:[E|e][+|-]?\d+)?|Infinity))\b'
    - match: '[\+\-]?\d*\.?\d+(?:[Ee][\+\-]?\d+)?'
      scope: constant.numeric.acmap

  strings:
    - include: double-quoted-string
    - include: single-quoted-string
    - include: template-string

# ---------------------------------------------------- PRIMITIVE-BUILDING-BLOCKS

  double-quoted-string:
    - match: "(?<!\\\\)\"" # Double quoted strings.
      scope: punctuation.definition.string.begin.acmap
      push:
        - meta_scope: string.quoted.double.acmap
        - meta_include_prototype: false
        - include: escape
        - match: "(?<!\\\\)\""
          scope: punctuation.definition.string.end.acmap
          pop: true
        - include: template-string
  # ↕
  single-quoted-string:
    - match: "(?<!\\\\)'" # Single quoted strings.
      scope: punctuation.definition.string.begin.acmap
      push:
        - meta_scope: string.quoted.single.acmap
        - meta_include_prototype: false
        - include: escape
        - match: "(?<!\\\\)'"
          scope: punctuation.definition.string.end.acmap
          pop: true
        - include: template-string
  # ➚
  template-string:
    - match: "\\$\\{"
      scope: punctuation.section.interpolation.begin.acmap
      push:
        - clear_scopes: 1
        - meta_scope: meta.interpolation.acmap
        - meta_content_scope: source.acmap.embedded
        - match: "\\}"
          scope: punctuation.section.interpolation.end.acmap
          pop: true

  escape:
    - match: '\\.'
      scope: constant.character.escape.acmap

  default: # Highlight remaining characters as unquoted strings.
    - include: escape
    - match: "([^\\s])"
      scope: string.unquoted.plain.out.acmap

  unaccounted: # Highlight unconsumed characters as invalid.
    - match: "([^\\s])"
      scope: invalid.illegal.acmap

# ------------------------------------------------------------------- CONSTRUCTS

  setting:
    - match: "^((@)([a-zA-Z][_a-zA-Z0-9]*))\\s*(=)\\s*" # (?=[^\\s]{2,})
      captures:
        1: variable.other.readwrite.setting.acmap # **purple
        2: punctuation.definition.variable.at-sign.acmap
        3: entity.name.setting.acmap # **purple
        4: keyword.operator.assignment.acmap
      push:
        - match: '$' # Note: Continue to end of line.
          pop: true
        - include: constants
        - include: numbers
        - include: strings
        - include: default

  variable:
    - match: "^((\\$)([_a-zA-Z][_a-zA-Z0-9]*))\\s*(=)\\s*" # (?=[^\\s]{2,})
      captures:
        1: variable.other.readwrite.global.acmap # **purple
        2: punctuation.definition.variable.dollar-sign.acmap
        3: entity.name.variable.acmap # **purple
        4: keyword.operator.assignment.acmap
      push:
        - match: '$' # Note: Continue to end of line.
          pop: true
        - include: strings
        - include: unaccounted

  command-string:
    - match: "(\\$)(\\()"
      captures:
        1: punctuation.definition.command-string.acmap # **purple
        2: punctuation.section.parens.command-string.begin.acmap
      push:
        - meta_scope: meta.command-string.acmap
        - match: "(?<!\\\\)(\\))"
          captures:
            1: punctuation.section.parens.command-string.end.acmap
          pop: true

        # - match: "\\n" # Handle: Newlines aren't allowed.
        #   scope: invalid.illegal.newline.acmap

        - match: "(\\$)(?=[\"'])" # Handle: cmd-string dynamic '$' argument.
          captures:
            1: storage.type.string.acmap
        - match: ","
          scope: punctuation.separator.comma.parameters.acmap # **purple
        - include: constants
        - include: numbers
        - include: strings

  command:
    - match: "^(?=\\.?[a-zA-Z])"
      push:
        - meta_scope: entity.other.command.acmap # **italicize
        - meta_include_prototype: false
        - match: "\\s*(,)\\s*"
          captures:
            1: punctuation.separator.comma.acmap # **purple
          pop: true
        - match: "(?=(=|,| |\t|$))"
          pop: true
        - include: escape
        - match: "((\\.)|(\\/))"
          captures:
            2: punctuation.accessor.dot.acmap # **purple
            3: punctuation.accessor.forward-slash.acmap # **purple
        - match: "[^-_+:/a-zA-Z0-9]"
          scope: invalid.illegal.acmap

  flag-list:
    - match: "(=)\\s*(\\[)"
      captures:
        1: keyword.operator.assignment.acmap
        2: punctuation.section.flag-list.begin.acmap # **purple-brace
      push:
        - meta_scope: meta.options-list.acmap
        - match: "(\\])"
          captures:
            1: punctuation.section.flag-list.end.acmap # **purple-brace
          pop: true
        - include: stray-brace-bracket
        - include: flag-rule-list
  # ➚
  flag-rule-list:
    - include: flags-list
    - include: keywords
  # ➚
  flags-list:
    - include: flag
    - include: options-list
    - match: "="
      scope: keyword.operator.assignment.acmap
      push:
        - match: "$"
          pop: true
        - include: command-string
        - include: constants
        - include: numbers
        - include: strings
        - include: default

  flag-oneliner:
    - match: "( |(=)\\s*)(?=(--?|default))"
      captures:
        2: keyword.operator.assignment.acmap
      push:
        - match: "$"
          pop: true
        - include: flags-oneliner
  # ➚
  flags-oneliner:
    - include: placeholder
    - include: keywords
    - include: flag
    - include: options-list
    - match: "="
      scope: keyword.operator.assignment.acmap
    - include: constants
    - include: numbers
    - include: strings
    - match: "\\|"
      scope: punctuation.separator.pipe.acmap # **purple
    - include: default

  placeholder:
    - match: "(--)(p)(\\#[a-fA-F0-9]+)" # Handle: .acdef placeholders.
      scope: entity.other.placeholder.acmap
      captures:
        1: punctuation.definition.flag.acmap
        2: support.type.placeholder-name.acmap # **purple
        3: constant.numeric.acmap

  keywords:
    - match: "(default)([ \t]{1,})"
      captures:
        1: keyword.control.default.acmap
    - include: command-string

  flag:
    - match: "(--?)(([a-zA-Z][-_.:a-zA-Z0-9]*)(\\?)?)?" # Handle: '--flag'
      scope: meta.flag-name.acmap
      captures:
        1: punctuation.definition.flag.acmap
        3: support.type.flag-name.acmap # **purple
        4: keyword.operator.assignment.boolean.acmap # **purple

  options-list:
    - match: "(=)(\\*)?\\s*(\\()"
      captures:
        1: keyword.operator.assignment.acmap
        2: keyword.operator.assignment.multi-flag.acmap
        3: punctuation.section.options-list.begin.acmap # **purple-brace
      push:
        - match: "(\\))"
          scope: punctuation.section.options-list.end.acmap # **purple-brace
          pop: true
        - include: stray-brace-parens
        - include: options-rule-list

        # - match: "^\\s*\\n" # Handle: Newlines aren't allowed.
        #   scope: invalid.illegal.newline.acmap

    - match: "(=)(\\*)" # Handle: Option-less multi-flag assignment.
      captures:
        1: keyword.operator.assignment.acmap
        2: keyword.operator.assignment.multi-flag.acmap

  options-rule-list:
    - match: "((-) )" # Handle: '- value'
      captures:
        2: punctuation.definition.block.option.item.acmap
      push:
        - match: "$"
          pop: true
        - include: options-values
    - include: options-values # Non-bullet (oneliner) options.

  options-values:
    - include: command-string
    - include: constants
    - include: numbers
    - include: strings
    - include: default

  stray-brace-bracket:
      - match: '((?<!\\)\[)' # Handle: Imbalanced brace.
        captures:
          1: invalid.illegal.stray-bracket.acmap

  stray-brace-parens:
    - match: '((?<!\\)\()' # Handle: Imbalanced brace.
      captures:
        1: invalid.illegal.stray-bracket.acmap
